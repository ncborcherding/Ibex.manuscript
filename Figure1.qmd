---
138*---
title: "Figure 1"
author: "Nick Borcherding"
format: html
editor: visual
date: "7/23/24"
---

## Loading Libraries and Functions

```{r}
library(reshape2)
library(viridis)
library(stringr)
library(ggplot2)
library(ggthemes)
library(patchwork)
```

```{r}
tuned.results <- list.files("~/Documents/GitHub/Ibex.manuscript/data/tuningRuns", 
                                full.names = TRUE)
file.names <- str_split(tuned.results, "/", simplify = TRUE)[,ncol(str_split(tuned.results, "/", simplify = TRUE))]
file.names <- str_remove_all(file.names, ".rds")
chain <- str_split(file.names, "_", simplify = TRUE)[,1]

total.results <- list()
for(x in seq_along(tuned.results)) {
  tmp <- readRDS(tuned.results[x])
  tmp$model <- paste0(tmp$model, "_", chain[x])
  total.results[[x]] <- tmp
}


tuned.results <- do.call(rbind, total.results)
tuned.results$overall.model <- paste0(tuned.results$method, "_", tuned.results$model)
tuned.results$approach <- ifelse(tuned.results$method == "OHE", "OHE", "AAP")
tuned.results$group <- str_split(tuned.results$model, "_", simplify = TRUE)[,1]

```

## Figure 1C

Visualization of the effect of the hidden layers (size and number) and latent dimension size on loss.

-   Loss be mean_square_error for all models (even though VAE used a derivative) and represented in -log10(value), the bigger the number, the better the performance

-   Only visualize one layer at a time in terms of effect on loss, will filter out other layers

```{r}
#############
#Layer 1
#############
plot1 <- ggplot(tuned.results[tuned.results$variable == "hidden_dim1",], 
       aes(x=as.numeric(value), y = -log10(as.numeric(score)), group = group)) + 
    geom_smooth(aes(color = group), lwd = 0.5, alpha = 0.7) + 
  facet_grid(optimizer~approach) + 
    ylab("-log10(mean_squared_error)") + 
    xlab("Layer 1 Size") + 
    scale_color_viridis(discrete = TRUE) + 
  scale_x_continuous(trans='log2') + 
  ylim(-2.5,5) + 
  theme_clean() + 
    theme(panel.grid.major = element_blank(), 
          panel.grid.minor = element_blank(),
          panel.background = element_rect(colour = "black", linewidth =1)) 

#################
#Laten Dimensions
#################
plot2 <- ggplot(tuned.results[tuned.results$variable == "latent_dim",], 
       aes(x=as.numeric(value), y = -log10(as.numeric(score)), group = group)) + 
    geom_smooth(aes(color = group), lwd = 0.5, alpha = 0.7) + 
  facet_grid(optimizer~approach) + 
    ylab("-log10(mean_squared_error)") + 
    xlab("Latent Dimension Size") + 
    scale_color_viridis(discrete = TRUE) + 
  ylim(-2.5,5) + 
  theme_clean() + 
   scale_x_continuous(trans='log2') + 
    theme(panel.grid.major = element_blank(), 
          panel.grid.minor = element_blank(),
          panel.background = element_rect(colour = "black", linewidth =1)) 

plot1 + plot2 + plot_layout(guides = "collect")
ggsave("./outputs/Figure1/Figure1C.pdf", height = 8, width = 10)

#############
#Layer 2
#############
plot3 <- ggplot(tuned.results[tuned.results$variable == "hidden_dim2",], 
       aes(x=as.numeric(value), y = -log10(as.numeric(score)), group = group)) + 
    geom_smooth(aes(color = group), lwd = 0.5) + 
  facet_grid(optimizer~approach) + 
    ylab("-log10(mean_squared_error)") + 
    xlab("Layer 2 Size") + 
    scale_color_viridis(discrete = TRUE) + 
  ylim(-2.5,5) + 
  theme_clean() + 
  scale_x_continuous(trans='log2') + 
    theme(panel.grid.major = element_blank(), 
          panel.grid.minor = element_blank(),
          panel.background = element_rect(colour = "black", linewidth =1)) 

#############
#Layer 3
#############
plot4 <- ggplot(tuned.results[tuned.results$variable == "hidden_dim3",], 
       aes(x=as.numeric(value), y = -log10(as.numeric(score)), group = group)) + 
    geom_smooth(aes(color = group), lwd = 0.5) + 
  facet_grid(optimizer~approach) + 
    ylab("-log10(mean_squared_error)") + 
    xlab("Layer 3 Size") + 
    scale_color_viridis(discrete = TRUE) + 
  ylim(-2.5,5) + 
  theme_clean() + 
  scale_x_continuous(trans='log2') + 
    theme(panel.grid.major = element_blank(), 
          panel.grid.minor = element_blank(),
          panel.background = element_rect(colour = "black", linewidth =1)) 

plot3 + plot4 + plot_layout(guides = "collect")
ggsave("./outputs/Supplemental/FigureX.pdf", height = 5.5, width = 10, dpi = 300)
```

## Figure 1D

Assessment of the performance of different amino acid property transformations - filtering out any OHE results (by definition not an amino acid property) and any model that uses sgd. The latter is because these models serially under performed compared to ADAM or RMSprop.

We are not worried about what the different parameters affected the performance, so we are filtering on hidden_dim1 as all models have at least 1 layer and we can then plot 1 loss value for each model.

```{r}
tmp.subset <- tuned.results[tuned.results$method != "OHE" & tuned.results$variable == "hidden_dim1" & tuned.results$optimizer != "sgd",]
median.value = tmp.subset %>%
                  group_by(arch) %>%
                  summarise(median_value = median(as.numeric(score)))
median.value$median_value <- -log10(median.value$median_value)
                

ggplot(tmp.subset, 
       aes(x=method, y = -log10(as.numeric(score)))) + 
    geom_boxplot(aes(fill = method), alpha = 0.7) + 
  facet_grid(.~arch, scales = "free_x") + 
  geom_hline(data = median.value, aes(yintercept = median_value), size = 1) + 
  
    ylab("-log10(mean_squared_error)") + 
    xlab("Amino Acid Properties") + 
  scale_x_discrete(limits = rev) + 
  coord_flip() + 
    scale_fill_viridis(discrete = TRUE, direction = -1) + 
  guides(fill = "none") + 
  
  theme_clean() + 
    theme(panel.grid.major = element_blank(), 
          panel.grid.minor = element_blank(),
          panel.background = element_rect(colour = "black", linewidth =1)) 
ggsave("./outputs/Figure1/Figure1D.pdf", height = 4.5, width = 6, dpi = 300)
```

## Conclusions

```{r}
sessionInfo()
```
