---
title: "Figure 3"
author: "Nick Borcherding"
format: html
editor: visual
date: 'Compiled: `r format(Sys.Date(), "%B %d, %Y")`'
---

## Loading Libraries

```{r}
library(Seurat)
library(scRepertoire)
library(patchwork)
library(ggplot2)
library(grid)
library(viridis)
library(dplyr)
library(RColorBrewer)
library(Nebulosa)
library(MOFA2)
library(Ibex)
library(stringr)
library(scplotter)
library(mixOmics)
library(MOFA2)
library(RGCCA)
library(FactoMineR)
library(harmony)
library(Matrix)
options(future.globals.maxSize= 89128960000)
```

## Converting Single-cell Data

```{r}
ad <- anndata::read_h5ad('./data/Kim2022/WU368_kim_et_al_nature_2022_gex_b_cells.h5ad')

#Forming New Seurat Object
SeuratMerge <- CreateSeuratObject(counts = t(ad$layers[["raw_counts"]]), 
                                  meta.data = ad$obs)
SeuratMerge <- NormalizeData(SeuratMerge)
#Adding Dimensional Reduction

PCA <- ad$obsm$X_pca
rownames(PCA) <- rownames(ad$obs)
PCA <- CreateDimReducObject(embeddings = PCA,
                             loadings = PCA,
                             projected = PCA,
                             key = "PC_",
                             assay = "RNA")
SeuratMerge[["pca"]] <- PCA


UMAP <- ad$obsm$X_umap
rownames(UMAP) <- rownames(ad$obs)
UMAP <- CreateDimReducObject(embeddings = UMAP,
                             loadings = UMAP,
                             projected = UMAP,
                             key = "UMAP_",
                             assay = "RNA")

SeuratMerge[["umap"]] <- UMAP

#Adding Epitope Information
Epitope.Data <- read.delim("./data/Kim2022/WU368_kim_et_al_nature_2022_mabs.tsv")
Epitope.Data$cell_id <- stringr::str_split(Epitope.Data$h_sequence_id, "_con", simplify = TRUE)[,1]

meta <- SeuratMerge[[]]
meta$barcodes <- rownames(meta)
meta <- merge(meta, Epitope.Data, by = "cell_id", all = TRUE)
meta <- meta[-which(is.na(meta$barcodes)),]
new.meta.data <- data.frame(Spike.Specific = meta$elisa, 
                            row.names = meta$barcodes)
new.meta.data$Spike.Specific[is.na(new.meta.data$Spike.Specific)] <- "Unknown"
new.meta.data$Spike.Specific[new.meta.data$Spike.Specific == TRUE] <- "Yes"
new.meta.data$Spike.Specific[new.meta.data$Spike.Specific == FALSE] <- "No"
SeuratMerge <- AddMetaData(SeuratMerge, new.meta.data)

####################
#Attaching BCR data 
####################

#Loading the Light Chain
IGL <- read.delim("./data/kim2022/WU368_kim_et_al_nature_2022_bcr_light.tsv.gz")[,c("cell_id", "locus", "v_call", "d_call", "j_call", "isotype", "productive", "junction_aa", "junction", "consensus_count", "duplicate_count")]
IGL <- IGL[!is.na(IGL$cell_id),]
colnames(IGL) <- c("barcode", "chain", "v_gene", "d_gene", "j_gene", "c_gene", "productive", "cdr3", "cdr3_nt", "reads", "umis")

#Loading the Heavy Chain
IGH <- read.delim("./data/kim2022/WU368_kim_et_al_nature_2022_bcr_heavy.tsv.gz")[,c("cell_id", "locus", "v_call", "d_call", "j_call", "isotype", "productive", "junction_aa", "junction", "consensus_count", "duplicate_count")]
IGH <- IGH[!is.na(IGH$cell_id),]
colnames(IGH) <- c("barcode", "chain", "v_gene", "d_gene", "j_gene", "c_gene", "productive", "cdr3", "cdr3_nt", "reads", "umis")

BCR <- rbind(IGH, IGL)
samples.vector <- stringr::str_split(BCR$barcode, "_", simplify = TRUE)[,1]
#Update vector to match larger grouping
samples.vector <- str_replace(samples.vector, "368.07", "368-07")
samples.vector <- str_replace(samples.vector, "368.22", "368-22")
samples.vector <- str_replace(samples.vector, "368.20", "368-20")
samples.vector <- str_split(samples.vector, "[.]", simplify = TRUE)[,1]

BCR.list <- split(BCR, samples.vector)

BCR.combined <- combineBCR(BCR.list, 
                           samples = names(BCR.list), 
                           removeNA = TRUE, 
                           filterMulti = TRUE)
saveRDS(BCR.combined, "./data/processed/Processed_BCR.rds")

meta <- SeuratMerge[[]]
meta$barcodes <- rownames(meta)
BCR.rbind <- do.call(rbind, BCR.combined)
BCR.rbind$barcode <- sub("^\\d+-\\w+_", "", BCR.rbind$barcode)
meta <- merge(meta, BCR.rbind, by.x = "cell_id", by.y = "barcode")
barcodes <- meta$barcodes
meta <- meta[,c(colnames(BCR.rbind)[-c(1:2)],"donor")]
meta$barcode <- barcodes

meta.list <- split(meta, meta$donor)
SeuratMerge <- combineExpression(meta.list, SeuratMerge)

#Isolating V and C Gene Usage from BCR Sequences
SeuratMerge$Heavy.V <- str_split(SeuratMerge$CTgene, "[.]", simplify = TRUE)[,1]
SeuratMerge$Heavy.V <- str_split(SeuratMerge$Heavy.V, "[,]", simplify = TRUE)[,1]
SeuratMerge$Heavy.V <- str_split(SeuratMerge$Heavy.V, "[*]", simplify = TRUE)[,1]

SeuratMerge$Light.V <- str_split(str_split(SeuratMerge$CTgene, "[_]", simplify = TRUE)[,2], "[.]", simplify = TRUE)[,1]
SeuratMerge$Light.V <- str_split(SeuratMerge$Light.V, "[,]", simplify = TRUE)[,1]
SeuratMerge$Light.V <- str_split(SeuratMerge$Light.V, "[*]", simplify = TRUE)[,1]

SeuratMerge$Heavy.C <- str_split(str_split(SeuratMerge$CTgene, "[.]", simplify = TRUE)[,4], "[_]", simplify = TRUE)[,1]
SeuratMerge$Light.C <- str_split(str_split(SeuratMerge$CTgene, "[_]", simplify = TRUE)[,2], "[.]", simplify = TRUE)[,3]

###############################
#Filtering for Ibex Application
###############################

#Removing Clones with no BCR sequences
clone.idx <- which(!is.na(SeuratMerge$CTaa))
SeuratMerge <- subset(SeuratMerge, cells = colnames(SeuratMerge)[clone.idx])

#Removing Clones with Heavy Chain CDR3 > 45
clone.idx <- which(nchar(str_split(SeuratMerge$CTaa, "_", simplify = TRUE)[,1]) < 45)
SeuratMerge <- subset(SeuratMerge, cells = colnames(SeuratMerge)[clone.idx])

saveRDS(SeuratMerge, "./data/processed/Kim2022_SeuratObject.rds")

############################
#Saving Outputs for Benisse
############################

tmp <- BCR[BCR$chain == "IGH",]
tmp <- tmp %>%
          group_by(barcode) %>%
          slice_max(order_by = reads, n=1) %>%
          as.data.frame()
  
tmp <- tmp %>%
          group_by(barcode) %>%
          slice_max(order_by = umis, n=1) %>%
          as.data.frame()
          
tmp <- data.frame(row.names = tmp$barcode,
                  contigs = paste0(tmp$barcode, "_contig_1"), 
                  cdr3 = tmp$cdr3)
  
rownames(tmp) <- stringr::str_replace_all(rownames(tmp), "-", ".")
  
write.csv(tmp, "./data/Benisse/inputs/Kim2022_contigs.csv")
```

## Figure 3A

Ploting UMAP and clusters

```{r}
SeuratMerge <- readRDS("./data/processed/Kim2022_SeuratObject.rds")

Cluster.Pal <- colorRampPalette(brewer.pal(11, "Paired"))(length(unique(SeuratMerge$leiden_0.18)))

update_geom_defaults("point", list(stroke=0.25))
CellDimPlot(SeuratMerge, 
            group_by = "leiden_0.18", 
            reduction = "umap",
            label = TRUE,
            pt.size = 0.1,
            label_insitu = TRUE,
            theme = "theme_blank", 
            raster = FALSE) + 
  guides(color = "none") + 
  theme_void()

ggsave("./outputs/Figure3/Figure3A.png", height = 4.5, width = 5, dpi = 300)
```

## Figure 3B

```{r}
features <- c("CD19", "CD27", "CD79A", "IGHM", "IGHD", "MKI67", "MS4A1", "PRDM1", "XBP1")

plot_density(SeuratMerge, 
                features = features) +
  plot_layout(ncol = 3) & 
  theme_void() & 
  theme(legend.position = "none", 
        plot.title = element_blank(), 
        plot.subtitle = element_blank(), 
        strip.text = element_blank(), 
        plot.margin = unit(c(10, 10, 20, 10), "pt"))  

ggsave("./outputs/Figure3/Figure3B.png", height = 13.5, width = 15, dpi = 300)
```

## Figure 3C

Plotting the Spike Specific Sequences

```{r}
#Overlaid on UMAP
CellDimPlot(SeuratMerge,
  group_by = "leiden_0.18", 
  reduction = "umap",
  highlight = 'Spike.Specific == "Yes"',
  raster = FALSE,
  theme = "theme_blank"
) + 
  guides(color = "none") + 
  theme_void()
ggsave("./outputs/Figure3/Figure3C.1.png", height = 4.5, width = 5, dpi = 300)

#Breakdown by Category
SeuratMerge$Spike.Specific <- factor(SeuratMerge$Spike.Specific, levels = c("Unknown", "No", "Yes"))
CellStatPlot(SeuratMerge, 
             ident = "leiden_0.18",
             group_by = "Spike.Specific", 
             frac = "group",
             swap = TRUE, 
             position = "stack") +
  scale_x_discrete(limits = rev) + 
  guides(fill = "none") + 
  coord_flip() + 
  theme(axis.title.y = element_blank())
ggsave("./outputs/Figure3/Figure3C.2.pdf", height = 3, width = 4.5)
```

## Figure 3D

```{r}
SeuratMerge  <- runIbex(SeuratMerge, 
                        chain = "Heavy",
                        method = "encoder",
                        encoder.model = "CNN", 
                        encoder.input = "atchleyFactors", 
                        reduction.name = "Ibex.H.CNN.AF")

#Light Chain
SeuratMerge  <- runIbex(SeuratMerge, 
                        chain = "Light",
                        method = "encoder",
                        encoder.model = "CNN", 
                        encoder.input = "atchleyFactors", 
                        reduction.name = "Ibex.L.CNN.AF")

# Identify the Ibex reductions
reductions <- Reductions(SeuratMerge)[grep("Ibex", Reductions(SeuratMerge))]



for (j in seq_along(reductions)) {
  # Determine whether to color by Heavy or Light chain usage
  if (grepl(".H.", reductions[j])) {
    vgene <- "Heavy.V"
    palette <- "viridis"
  } else {
    vgene <- "Light.V"
    palette <- "inferno"
  }
# Remove duplicated embeddings 
non.duplicated.indices <- which(!duplicated(SeuratMerge@reductions[[reductions[j]]]@cell.embeddings))
  SeuratSubset <- subset(SeuratMerge, cells = colnames(SeuratMerge)[non.duplicated.indices])
  # Run PHATE directly on the chosen Ibex embeddings
  phate_result <- phateR::phate(SeuratSubset@reductions[[reductions[j]]]@cell.embeddings)
  
  # Convert PHATE output to a DimReduc object
  phate_object <- CreateDimReducObject(
    embeddings = phate_result$embedding, 
    key = "PHATE_", 
    assay = DefaultAssay(SeuratSubset)
  )
  
  reduction.name <- paste0("Phate.", reductions[j])
  # Store it as a new reduction called "phate"
  SeuratSubset[[reduction.name]] <- phate_object
  
  # Now you can use CellDimPlot with reduction = "phate" 
  plot1 <- CellDimPlot(
    SeuratSubset,
    group_by = vgene,
    reduction = reduction.name,
    pt.size = 0.1,
    label_insitu = TRUE,
    theme = "theme_blank", 
    raster = FALSE
  ) + 
    guides(color = "none") + 
    scale_color_viridis(discrete = TRUE, option = palette) + 
    theme_void()
  
  ggsave(
    filename = paste0("./outputs/Figure3/Figure3D_", reductions[j], "_PHATE.png"),
    plot = plot1,
    height = 4.5, width = 5,
    dpi = 600
  )
  
 df <- data.frame(SeuratSubset[[]], SeuratSubset[[reduction.name]]@cell.embeddings)
phate.names.1 <- colnames(df)[ncol(df)-1]
phate.names.2 <- colnames(df)[ncol(df)]

plot1 +
  stat_density_2d(data = subset(df, Spike.Specific == "Yes"), 
                 aes(x = .data[[phate.names.1]], 
                     y = .data[[phate.names.2]], 
                     fill = after_stat(level), 
                     alpha = after_stat(level)), 
                 geom = "polygon", 
                 bins = 30) + 
  scale_color_manual(values = rep("lightgrey", length(levels(plot1$data[,vgene])))) + 
  scale_fill_viridis_c(option = palette) + 
  guides(fill = "none", alpha = "none") + 
  #Expanding grid to allow for complete contours
  xlim(min(df[[phate.names.1]]) - sd(df[[phate.names.1]])/1.5,
       max(df[[phate.names.1]]) + sd(df[[phate.names.1]])/1.5) + 
  ylim(min(df[[phate.names.2]]) - sd(df[[phate.names.2]])/1.5,
       max(df[[phate.names.2]]) + sd(df[[phate.names.2]])/1.5)

   
  ggsave(
    filename = paste0("./outputs/Figure3/Figure3D_", reductions[j], "_PHATE_spikeSpecific.png"),
    height = 4.5, width = 5,
    dpi = 600)
}
rm(SeuratSubset)
gc()
```

## Figure 3E

```{r}
corrected.pca <- HarmonyMatrix(SeuratMerge@reductions$pca@cell.embeddings, 
                               meta_data = SeuratMerge[[]], 
                               vars_use = "sample")

Heavy <- t(SeuratMerge[["Ibex.H.CNN.AF"]]@cell.embeddings)
Heavy <- Heavy[which(rowSums(Heavy) != 0),]
Light = t(SeuratMerge[["Ibex.L.CNN.AF"]]@cell.embeddings)
Light <- Light[which(rowSums(Light) != 0),]

data_list <- list(Heavy = t(Heavy),
                  Light = t(Light), 
                  RNA = corrected.pca)

#############
#Running MOFA
#############
mofa.object <- create_mofa(
  list(Heavy = t(SeuratMerge[["Ibex.H.CNN.AF"]]@cell.embeddings),
       Light = t(SeuratMerge[["Ibex.L.CNN.AF"]]@cell.embeddings),
       RNA = t(corrected.pca)))
mofa.object <- prepare_mofa(mofa.object)
mofa.object <- run_mofa(mofa.object)

integrated.values <- get_factors(model)[[1]]

SeuratMerge[["mofa.integrated"]] <- 
  CreateDimReducObject(embeddings = integrated.values,
                       stdev = rep(0, ncol(integrated.values)),
                       assay = "RNA",
                       key = "mm",
                       jackstraw = NULL,
                       misc = list())

SeuratMerge[["mofa.phate"]] <- 
  CreateDimReducObject(embeddings = phate_output$embedding,
                       stdev = rep(0, ncol(phate_output$embedding)),
                       assay = "RNA",
                       key = "mm",
                       jackstraw = NULL,
                       misc = list())

rm(integrated.value)
rm(phate_output)
gc()

############################################
#Generalized Canonical Correlation Analysis
###########################################

design <- matrix(1, ncol = length(data_list), nrow = length(data_list))
diag(design) <- 0

rgcca_res <- rgcca(data_list, connection = design, ncomp = 5, verbose = TRUE)
integrated.values <- do.call(cbind, rgcca_res$Y)
colnames(integrated.values) <- paste("mm_", seq_len(ncol(integrated.values)))
phate_output <- phateR::phate(integrated.values)



SeuratMerge[["cca.integrated"]] <- 
  CreateDimReducObject(embeddings = integrated.values,
                       stdev = rep(0, ncol(integrated.values)),
                       assay = "RNA",
                       key = "mm",
                       jackstraw = NULL,
                       misc = list())

SeuratMerge[["cca.phate"]] <- 
  CreateDimReducObject(embeddings = phate_output$embedding,
                       stdev = rep(0, ncol(phate_output$embedding)),
                       assay = "RNA",
                       key = "mm",
                       jackstraw = NULL,
                       misc = list())

rm(integrated.value)
rm(phate_output)
gc()
###########################
#Multiple Factor Analysis
###########################

# Concatenate modalities
combined_data <- cbind(t(Heavy), t(Light), corrected.pca)

# Define group sizes: e.g., 50 for RNA, 128 for BCR1, 128 for BCR2
group <- c(ncol(t(Heavy)), ncol(t(Light)), ncol(corrected.pca))

# Run MFA; ncp is the number of common dimensions to keep
mfa_res <- MFA(combined_data, group = group, type = rep("s", length(group)), ncp = 20)

# Extract integrated factors
integrated_matrix <- mfa_res$ind$coord

phate_output <- phateR::phate(integrated_matrix)

SeuratMerge[["mfa.integrated"]] <- 
  CreateDimReducObject(embeddings = integrated_matrix,
                       stdev = rep(0, ncol(integrated_matrix)),
                       assay = "RNA",
                       key = "mm",
                       jackstraw = NULL,
                       misc = list())

SeuratMerge[["mfa.phate"]] <- 
  CreateDimReducObject(embeddings = phate_output$embedding,
                       stdev = rep(0, ncol(phate_output$embedding)),
                       assay = "RNA",
                       key = "mm",
                       jackstraw = NULL,
                       misc = list())
rm(integrated_matrix)
rm(phate_output)
gc()

###########################
#Block Partial Least Squares 
###########################

# Run block PLS; ncomp sets the number of latent components to extract.
block_pls_res <- block.pls(X = data_list, ncomp = 10)

# For example, use the latent variables from the RNA block:
integrated_matrix <- block_pls_res$variates$RNA


# (Now add the embeddings back to your Seurat object as before)
SeuratMerge[["bpls.integrated"]] <- CreateDimReducObject(
  embeddings = integrated_matrix,
  stdev = rep(0, ncol(integrated_matrix)),
  assay = "RNA",
  key = "mm",
  jackstraw = NULL,
  misc = list()
)

SeuratMerge[["bpls.phate"]] <- CreateDimReducObject(
  embeddings = phate_output$embedding,
  stdev = rep(0, ncol(phate_output$embedding)),
  assay = "RNA",
  key = "mm",
  jackstraw = NULL,
  misc = list()
)

rm(integrated_matrix)
rm(phate_output)
gc()

#####################
#Visualization
#####################

CellDimPlot(SeuratMerge, 
            group_by = "sample", 
            reduction = "mofa.phate",
            pt.size = 0.1,
            theme = "theme_blank", 
            raster = FALSE) + 
  guides(color = "none")  + 
  theme_minimal()

CellDimPlot(SeuratMerge,
  group_by = "leiden_0.18", 
  reduction = "mofa.phate",
  highlight = 'Spike.Specific == "Yes"',
  raster = FALSE,
  theme = "theme_blank"
) + 
  guides(color = "none")  + 
  theme_minimal()


CellDimPlot(SeuratMerge, 
            group_by = "sample", 
            reduction = "cca.phate",
            pt.size = 0.1,
            theme = "theme_blank", 
            raster = FALSE) + 
  guides(color = "none")  + 
  theme_minimal()

CellDimPlot(SeuratMerge,
  group_by = "leiden_0.18", 
  reduction = "cca.phate",
  highlight = 'Spike.Specific == "Yes"',
  raster = FALSE,
  theme = "theme_blank"
) + 
  guides(color = "none")  + 
  theme_minimal()

CellDimPlot(SeuratMerge, 
            group_by = "sample", 
            reduction = "mfa.phate",
            pt.size = 0.1,
            theme = "theme_blank", 
            raster = FALSE) + 
  guides(color = "none") + 
  theme_minimal()


CellDimPlot(SeuratMerge,
  group_by = "leiden_0.18", 
  reduction = "mfa.phate",
  highlight = 'Spike.Specific == "Yes"',
  raster = FALSE,
  theme = "theme_blank"
) + 
  guides(color = "none") + 
  theme_minimal()

CellDimPlot(SeuratMerge, 
            group_by = "sample", 
            reduction = "bpls.phate",
            pt.size = 0.1,
            theme = "theme_blank", 
            raster = FALSE) + 
  guides(color = "none")  + 
  theme_minimal()

CellDimPlot(SeuratMerge,
  group_by = "leiden_0.18", 
  reduction = "bpls.phate",
  highlight = 'Spike.Specific == "Yes"',
  raster = FALSE,
  theme = "theme_blank"
) + 
  guides(color = "none") + 
  theme_minimal()

```

## Saving Final File

```{r}
saveRDS(SeuratMerge, "./data/processed/Dugan2021_BEAM.ab_Recovered_Seurat.rds")
```

## Conclusions

```{r}
sessionInfo()
```
