GEX.matrices <- list.files("./data/sequencingRuns/",
pattern = "filtered_feature_bc_matrix",
recursive = TRUE,
full.names = TRUE)
GEX.matrices <- list.files("./data/sequencingRuns/",
pattern = "filtered_feature_bc_matrix",
recursive = TRUE,
full.names = TRUE)
GEX.matrices <- list.files("./data/sequencingRuns/",
pattern = "$_filtered_feature_bc_matrix",
recursive = TRUE,
full.names = TRUE)
GEX.matrices <- list.files("./data/sequencingRuns/",
pattern = "filtered_feature_bc_matrix$",
recursive = TRUE,
full.names = TRUE)
GEX.matrices <- list.files("./data/sequencingRuns/",
pattern = "feature_bc_matrix",
recursive = TRUE,
full.names = TRUE)
GEX.matrices <- list.dir("./data/sequencingRuns/",
pattern = "feature_bc_matrix",
recursive = TRUE,
full.names = TRUE)
GEX.matrices <- list.dirs("./data/sequencingRuns/",
pattern = "feature_bc_matrix",
recursive = TRUE,
full.names = TRUE)
GEX.matrices <- list.dirs("./data/sequencingRuns/",
recursive = TRUE,
full.names = TRUE)
GEX.matrices
GEX.matrices <- list.dirs("./data/sequencingRuns",
recursive = TRUE,
full.names = TRUE)
GEX.matrices
GEX.matrices <- GEX.matrices[grep("filtered_feature_bc_matrix", GEX.matrices)]
sample.names <- list.dirs("./data/sequencingRuns")
sample.names
sample.names <- list.dirs("./data/sequencingRuns", recursive = FALSE)
library(Seurat)
i <- 1
tmp <- Read10X(GEX.matrices[[i]])
i <- 5
tmp <- Read10X(GEX.matrices[[i]])
length(tmp)
s.object <- CreateSeuratObject(counts = tmp$`Gene Expression`, sample.names[i])
rownames(tmp$`Antibody Capture`) <- stringr::str_remove_all(rownames(tmp$`Antibody Capture`), "anti_human_")
rownames(tmp$`Antibody Capture`)
rownames(tmp$`Antibody Capture`) <- stringr::str_remove_all(rownames(tmp$`Antibody Capture`), "anti_mousehuman_")
rownames(tmp$`Antibody Capture`)
rownames(tmp$`Antibody Capture`) <- substr(rownames(tmp$`Antibody Capture`), 6, nchar(rownames(tmp$`Antibody Capture`)))
adt_assay <- CreateAssayObject(counts = tmp$`Antibody Capture`)
s.object[["ADT"]] <- adt_assay
dir.create("./qc")
s.object[["percent.mt"]] <- PercentageFeatureSet(s.object, pattern = "^MT-")
s.object[["percent.rb"]] <- PercentageFeatureSet(s.object, pattern = "^RBS|RPL")
s.object <- SCTransform(s.object,
vars.to.regress = c('percent.mt', 'percent.rb', "nFeature_RNA"),
vst.flavor = "v2",
min_cells = 3,
verbose = FALSE)
s.object <- subset(s.object, subset = nFeature_RNA > 100)
s.object[["percent.mt"]] <- PercentageFeatureSet(s.object, pattern = "^MT-")
s.object[["percent.rb"]] <- PercentageFeatureSet(s.object, pattern = "^RBS|RPL")
s.object <- SCTransform(s.object,
vars.to.regress = c('percent.mt', 'percent.rb', "nCount_RNA"),
vst.flavor = "v2",
min_cells = 3,
verbose = FALSE)
p1 <- VlnPlot(object = s.object, features = c("nCount_RNA")) + theme(legend.position = "none")
library(ggplot2)
p1 <- VlnPlot(object = s.object, features = c("nCount_RNA")) + theme(legend.position = "none")
p2 <- VlnPlot(object = s.object, features = c("nFeature_RNA")) + theme(legend.position = "none")
p3 <- VlnPlot(object = s.object, features = c("percent.mt")) + theme(legend.position = "none")
pdf(paste0("./qc/", samples.names[i], ".pdf"), height = 8, width=12)
pdf(paste0("./qc/", sample.names[i], ".pdf"), height = 8, width=12)
sample.names <- stringr::str_split(sample.names, "/", simplify = TRUE)
sample.names <- list.dirs("./data/sequencingRuns", recursive = FALSE)
stringr::str_split(sample.names, "[/]", simplify = TRUE)
sample.names <- stringr::str_split(sample.names, "[/]", simplify = TRUE)[,4]
pdf(paste0("./qc/", sample.names[i], ".pdf"), height = 8, width=12)
grid.arrange(p1, p2, p3, ncol = 3)
p1 + p2 + p3
ggsave(paste0("./qc/", sample.names[i], ".pdf"), height = 8, width=12)
suppressPackageStartupMessages(library(patchwork))
p1 + p2 + p3+ plot_layout(ncol = 3)
ggsave(paste0("./qc/", sample.names[i], ".pdf"), height = 8, width=12)
###########################
#Here is the filtering step
############################
standev <- sd(log(tmp$nCount_RNA))*2 #cutting off above standard deviation of 2
###########################
#Here is the filtering step
############################
standev <- sd(log(s.object$nCount_RNA))*2 #cutting off above standard deviation of 2
###########################
#Here is the filtering step
############################
standev <- sd(log(s.object$nCount_RNA))*2 #cutting off above standard deviation of 2
mean <- mean(log(s.object$nCount_RNA))
cut <- round(exp(standev+mean))
tmp <- subset(tmp, subset = percent.mt < 15 & nFeature_RNA < cut)
s.object <- subset(s.object, subset = percent.mt < 15 & nFeature_RNA < cut)
contig.file <- list.file(paste0("./data/sequencingRun/", sample.names[i]))
contig.file <- list.files(paste0("./data/sequencingRun/", sample.names[i]))
paste0("./data/sequencingRun/", sample.names[i])
contig.file <- list.files(paste0("./data/sequencingRuns/", sample.names[i]))
contig.file <- list.files(paste0("./data/sequencingRuns/", sample.names[i]),
pattern = "contig",
full.names = TRUE)
tmp <- Read10X(GEX.matrices[[i]])
if(length(tmp) == 2) {
s.object <- CreateSeuratObject(counts = tmp$`Gene Expression`, sample.names[i])
#Removing extra prefixes on antibodies
rownames(tmp$`Antibody Capture`) <- stringr::str_remove_all(rownames(tmp$`Antibody Capture`), "anti_human_")
rownames(tmp$`Antibody Capture`) <- stringr::str_remove_all(rownames(tmp$`Antibody Capture`), "anti_mousehuman_")
rownames(tmp$`Antibody Capture`) <- substr(rownames(tmp$`Antibody Capture`), 6, nchar(rownames(tmp$`Antibody Capture`)))
adt_assay <- CreateAssayObject(counts = tmp$`Antibody Capture`)
s.object[["ADT"]] <- adt_assay
} else {
s.object <- CreateSeuratObject(counts = tmp, project = sample.names[i])
}
s.object <- RenameCells(object = s.object , new.names = paste0(sample.names[i], "_", rownames(s.object[[]])))
s.object <- subset(s.object, subset = nFeature_RNA > 100)
s.object[["percent.mt"]] <- PercentageFeatureSet(s.object, pattern = "^MT-")
s.object[["percent.rb"]] <- PercentageFeatureSet(s.object, pattern = "^RBS|RPL")
s.object <- SCTransform(s.object,
vars.to.regress = c('percent.mt', 'percent.rb', "nCount_RNA"),
vst.flavor = "v2",
min_cells = 3,
verbose = FALSE)
p1 <- VlnPlot(object = s.object, features = c("nCount_RNA")) + theme(legend.position = "none")
p2 <- VlnPlot(object = s.object, features = c("nFeature_RNA")) + theme(legend.position = "none")
p3 <- VlnPlot(object = s.object, features = c("percent.mt")) + theme(legend.position = "none")
p1 + p2 + p3+ plot_layout(ncol = 3)
ggsave(paste0("./qc/", sample.names[i], ".pdf"), height = 8, width=12)
###########################
#Here is the filtering step
############################
standev <- sd(log(s.object$nCount_RNA))*2 #cutting off above standard deviation of 2
mean <- mean(log(s.object$nCount_RNA))
cut <- round(exp(standev+mean))
s.object <- subset(s.object, subset = percent.mt < 15 & nFeature_RNA < cut)
contig.file <- list.files(paste0("./data/sequencingRuns/", sample.names[i]),
pattern = "contig",
full.names = TRUE)
contigs <- read.csv(contig.file)
list.head(s.object[[]])
head(s.object[[]])
clones <- combineBCR(contigs, samples = sample.names[i], removeNA = TRUE)
library(scRepertoire)
clones <- combineBCR(contigs, samples = sample.names[i], removeNA = TRUE)
s.object<- combineExpression(clones, s.object, cloneCall="aa")
head(s.object[[]])
seurat.list <- NULL
for(i in seq_along(samples) {
for(i in seq_along(sample.names) {
for(i in seq_along(sample.names)) {
tmp <- Read10X(GEX.matrices[[i]])
if(length(tmp) == 2) {
s.object <- CreateSeuratObject(counts = tmp$`Gene Expression`, sample.names[i])
#Removing extra prefixes on antibodies
rownames(tmp$`Antibody Capture`) <- stringr::str_remove_all(rownames(tmp$`Antibody Capture`), "anti_human_")
rownames(tmp$`Antibody Capture`) <- stringr::str_remove_all(rownames(tmp$`Antibody Capture`), "anti_mousehuman_")
rownames(tmp$`Antibody Capture`) <- substr(rownames(tmp$`Antibody Capture`), 6, nchar(rownames(tmp$`Antibody Capture`)))
adt_assay <- CreateAssayObject(counts = tmp$`Antibody Capture`)
s.object[["ADT"]] <- adt_assay
} else {
s.object <- CreateSeuratObject(counts = tmp, project = sample.names[i])
}
s.object <- RenameCells(object = s.object , new.names = paste0(sample.names[i], "_", rownames(s.object[[]])))
s.object <- subset(s.object, subset = nFeature_RNA > 100)
s.object[["percent.mt"]] <- PercentageFeatureSet(s.object, pattern = "^MT-")
s.object[["percent.rb"]] <- PercentageFeatureSet(s.object, pattern = "^RBS|RPL")
s.object <- SCTransform(s.object,
vars.to.regress = c('percent.mt', 'percent.rb', "nCount_RNA"),
vst.flavor = "v2",
min_cells = 3,
verbose = FALSE)
p1 <- VlnPlot(object = s.object, features = c("nCount_RNA")) + theme(legend.position = "none")
p2 <- VlnPlot(object = s.object, features = c("nFeature_RNA")) + theme(legend.position = "none")
p3 <- VlnPlot(object = s.object, features = c("percent.mt")) + theme(legend.position = "none")
p1 + p2 + p3+ plot_layout(ncol = 3)
ggsave(paste0("./qc/", sample.names[i], ".pdf"), height = 8, width=12)
###########################
#Here is the filtering step
############################
standev <- sd(log(s.object$nCount_RNA))*2 #cutting off above standard deviation of 2
mean <- mean(log(s.object$nCount_RNA))
cut <- round(exp(standev+mean))
s.object <- subset(s.object, subset = percent.mt < 15 & nFeature_RNA < cut)
seurat.list[[i]] <- s.object
}
suppressPackageStartupMessages(library(Seurat))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(gridExtra))
suppressPackageStartupMessages(library(viridis))
suppressPackageStartupMessages(library(RColorBrewer))
suppressPackageStartupMessages(library(Matrix))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(Ibex))
suppressPackageStartupMessages(library(mumosa))
suppressPackageStartupMessages(library(patchwork))
dir.create("./qc")
GEX.matrices <- list.dirs("./data/sequencingRuns",
recursive = TRUE,
full.names = TRUE)
GEX.matrices <- GEX.matrices[grep("filtered_feature_bc_matrix", GEX.matrices)]
sample.names <- list.dirs("./data/sequencingRuns", recursive = FALSE)
sample.names <- stringr::str_split(sample.names, "[/]", simplify = TRUE)[,4]
seurat.list <- NULL
for(i in seq_along(sample.names)) {
tmp <- Read10X(GEX.matrices[[i]])
if(length(tmp) == 2) {
s.object <- CreateSeuratObject(counts = tmp$`Gene Expression`, sample.names[i])
#Removing extra prefixes on antibodies
rownames(tmp$`Antibody Capture`) <- stringr::str_remove_all(rownames(tmp$`Antibody Capture`), "anti_human_")
rownames(tmp$`Antibody Capture`) <- stringr::str_remove_all(rownames(tmp$`Antibody Capture`), "anti_mousehuman_")
rownames(tmp$`Antibody Capture`) <- substr(rownames(tmp$`Antibody Capture`), 6, nchar(rownames(tmp$`Antibody Capture`)))
adt_assay <- CreateAssayObject(counts = tmp$`Antibody Capture`)
s.object[["ADT"]] <- adt_assay
} else {
s.object <- CreateSeuratObject(counts = tmp, project = sample.names[i])
}
s.object <- RenameCells(object = s.object , new.names = paste0(sample.names[i], "_", rownames(s.object[[]])))
s.object <- subset(s.object, subset = nFeature_RNA > 100)
s.object[["percent.mt"]] <- PercentageFeatureSet(s.object, pattern = "^MT-")
s.object[["percent.rb"]] <- PercentageFeatureSet(s.object, pattern = "^RBS|RPL")
s.object <- SCTransform(s.object,
vars.to.regress = c('percent.mt', 'percent.rb', "nCount_RNA"),
vst.flavor = "v2",
min_cells = 3,
verbose = FALSE)
p1 <- VlnPlot(object = s.object, features = c("nCount_RNA")) + theme(legend.position = "none")
p2 <- VlnPlot(object = s.object, features = c("nFeature_RNA")) + theme(legend.position = "none")
p3 <- VlnPlot(object = s.object, features = c("percent.mt")) + theme(legend.position = "none")
p1 + p2 + p3+ plot_layout(ncol = 3)
ggsave(paste0("./qc/", sample.names[i], ".pdf"), height = 8, width=12)
###########################
#Here is the filtering step
############################
standev <- sd(log(s.object$nCount_RNA))*2 #cutting off above standard deviation of 2
mean <- mean(log(s.object$nCount_RNA))
cut <- round(exp(standev+mean))
s.object <- subset(s.object, subset = percent.mt < 15 & nFeature_RNA < cut)
seurat.list[[i]] <- s.object
}
recursice = TRUE)
recursice = TRUE)
contig.file <- list.files(paste0("./data/sequencingRuns/",
pattern = "contig",
full.names = TRUE,
recursice = TRUE)
contig.file
contig.file
ontig.file <- list.files("./data/sequencingRuns/",
pattern = "contig",
full.names = TRUE,
recursice = TRUE)
contig.file <- list.files("./data/sequencingRuns/",
pattern = "contig",
full.names = TRUE,
recursive = TRUE)
contig.file
contigs <- lapply(contig.file, read.csv)
sample.names
clones <- combineBCR(contigs, samples = sample.names, removeNA = TRUE)
s.object<- combineExpression(clones, s.object, cloneCall="aa")
s.object$BCR.recoverd <- "No"
s.object$BCR.recoverd[!is.na(s.object$CTaa)] <- "Yes"
seurat.list <- PrepSCTIntegration(seurat.list)
seurat.merge <- merge(seurat.list[[1]], seurat.list[-1])
rm(tmp)
seurat.merge <- merge(seurat.list[[1]], seurat.list[-1])
seurat.merge <- combineExpression(clones, seurat.merge, cloneCall = "aa")
head(seurat.merge[[]])
seurat.merge$BCR.recoverd <- "No"
seurat.merge$BCR.recoverd[!is.na(seurat.merge$CTaa)] <- "Yes"
table(seurat.merge$BCR.recoverd)
seurat.merge <- subset(seurat.merge, BCR.recoverd == "Yes")
dim(seurat.merge)
seurat.merge <- readRDS("./data/Ibex_SCdata.rds")
saveRDS(seurat.merge, "./data/Ibex_SCdata.rds")
View(contigs)
head(contigs[[1]])
