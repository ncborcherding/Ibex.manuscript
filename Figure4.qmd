---
title: "Figure 4"
author: "Nick Borcherding"
format: html
editor: visual
date: "7/23/24"
---

# Processing Benisse

Here we need to preprocess the 10x outputs to match the [Benisse workflow](https://github.com/wooyongc/Benisse). Need to create 2 csv files: 1) an expression matrix and 2) a contig file with the contig ID and cdr3 AA sequence for IGH loci.

```{r}
library(Seurat)
library(dplyr)
library(bluster)
library(pheatmap)
"%!in%" <- Negate("%in%")

#####################
#Processing RNA Data
#####################

SC.Files <- list.files("./data/BEAM.AB/Dugan2021/Recovered/")
for(i in seq_along(SC.Files)) {
    tmp <- Read10X(data.dir = paste0("./data/BEAM.AB/Dugan2021/Recovered/", SC.Files[i]))
    tmp <- as.data.frame(tmp[[1]])
    write.csv(tmp, paste0("./data/Benisse/inputs/", SC.Files[i], "_exp.csv"))
}


#######################
#Processing Contig Data
#######################

for(i in seq_along(SC.Files)) {
  tmp <- read.csv(paste0("./data/BEAM.AB/Dugan2021/Recovered/", SC.Files[i], "/filtered_contig_annotations.csv.gz"))
  tmp <- tmp[tmp$productive == "True" & tmp$chain == "IGH",]
  tmp <- tmp %>%
          group_by(barcode) %>%
          slice_max(order_by = reads, n=1) %>%
          as.data.frame()
  
  tmp <- tmp %>%
          group_by(barcode) %>%
          slice_max(order_by = umis, n=1) %>%
          as.data.frame()
          
  tmp <- data.frame(row.names = tmp$barcode,
                    contigs = tmp$contig_id, 
                    cdr3 = tmp$cdr3)
  
  rownames(tmp) <- stringr::str_replace_all(rownames(tmp), "-", ".")
  
  write.csv(tmp, paste0("./data/Benisse/inputs/", SC.Files[i], ".csv"))
}


```

## Step 1: BCR Encoding

```{python eval = FALSE}
# Define the range of samples
start_sample = 5231092
end_sample = 5231101

# Define the base command and file paths
base_command = "python3 AchillesEncoder.py"
input_base_path = "/Users/nick/Documents/GitHub/Ibex.manuscript/data/Benisse/inputs/"
output_base_path = "/Users/nick/Documents/GitHub/Ibex.manuscript/data/Benisse/encoded/"
cuda_flag = "--cuda False"

# Loop through the sample numbers and generate the command line scripts
for sample_number in range(start_sample, end_sample + 1):
    sample_label = f"GSM{sample_number}"
    input_file = f"{input_base_path}{sample_label}.csv"
    output_file = f"{output_base_path}{sample_label}_encoded.csv"
    command = f"{base_command} --input_data {input_file} --output_data {output_file} {cuda_flag}"
    print(command)
```

## Step 2: Running Core Benisse Model

```{python eval = FALSE}
# Define the range of samples
start_sample = 5231092
end_sample = 5231101

# Define the base command and file paths
base_command = "Rscript Benisse.R"
input_base_path = "/Users/nick/Documents/GitHub/Ibex.manuscript/data/Benisse/inputs/"
encoded_base_path = "/Users/nick/Documents/GitHub/Ibex.manuscript/data/Benisse/encoded/"
output_base_path = "/Users/nick/Documents/GitHub/Ibex.manuscript/data/Benisse/outputs/"

# Additional fixed parameters
additional_params = "1610 1 100 1 1 10 1e-10"

# Loop through the sample numbers and generate the command line scripts
for sample_number in range(start_sample, end_sample + 1):
    sample_label = f"GSM{sample_number}"
    exp_file = f"{input_base_path}{sample_label}_exp.csv"
    contigs_file = f"{input_base_path}{sample_label}_contigs.csv"
    encoded_file = f"{encoded_base_path}{sample_label}_encoded.csv"
    output_dir = f"{output_base_path}{sample_label}"
    command = f"{base_command} {exp_file} {contigs_file} {encoded_file} {output_dir} {additional_params}"
    print(command)

```

# Unifying Benisse and Ibex Data

```{r}
Benisse.files <- list.files("./data/Benisse/encoded", 
                            recursive = TRUE, 
                            full.names = TRUE)
samples <- stringr::str_split(Benisse.files, "/", simplify = TRUE)[,5]
samples <- stringr::str_split(samples, "_", simplify = TRUE)[,1]

lapply(Benisse.files, function(x) {
  read.csv(x)[,2:22]
}) -> Benisse.results
names(Benisse.results) <- samples
Benisse.results <- bind_rows(Benisse.results, .id = "Samples")

SeuratMerge <- readRDS("./data/processed/Dugan2021_BEAM.ab_Recovered_Seurat.rds")
SeuratMeta <- SeuratMerge[[]]
Ibex.IGH <- unique(SeuratMerge@reductions$Ibex.H.VAE.AF@cell.embeddings)

barcodes <- rownames(Ibex.IGH)
lapply(barcodes, function(x) {
  idx <- which(Benisse.results$Samples == SeuratMeta[x,]$orig.ident & Benisse.results$index == str_split(SeuratMeta[x,]$CTaa, "_", simplify = TRUE)[,1])
  idx
}) -> Benisse.Index

#Ordering Benisse Results
Benisse.Index <- unique(do.call(c, Benisse.Index))
Benisse.results <- Benisse.results[Benisse.Index,]

barcodes <- rownames(Ibex.IGH)
lapply(barcodes, function(x) {
  idx <- which(SeuratMeta[x,]$orig.ident == Benisse.results$Samples  & str_split(SeuratMeta[x,]$CTaa, "_", simplify = TRUE)[,1] == Benisse.results$index)
  idx
}) -> Seurat.Index
Seurat.Index <- unique(do.call(c, Seurat.Index))
Ibex.IGH <- Ibex.IGH[Seurat.Index,]
SeuratMeta <- SeuratMeta[Seurat.Index,]

ClusterSweep.Ibex <- clusterSweep(Ibex.IGH, 
    NNGraphParam(), 
    k=as.integer(c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70)),
    cluster.fun=c("louvain", "walktrap", "infomap"),
    BPPARAM=BiocParallel::MulticoreParam(4))

plotSweep(ClusterSweep.Ibex, Ibex.IGH)
ggsave("./outputs/Supplemental/FigureA_1.pdf", height = 4, width = 8)

ClusterSweep.Benisse <- clusterSweep(Benisse.results[,2:21], 
    NNGraphParam(), 
    k=as.integer(c(5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70)),
    cluster.fun=c("louvain", "walktrap", "infomap"),
    BPPARAM=BiocParallel::MulticoreParam(4))


plotSweep(ClusterSweep.Benisse, Benisse.results[,2:21])
ggsave("./outputs/Supplemental/FigureA_2.pdf", height = 4, width = 8)

##########################
#Clustering based on Sweep
##########################
myClusterFUN <- function(x, k) {
    clusterRows(x, BLUSPARAM=NNGraphParam(k=k, cluster.fun="infomap"))
}

Cluster.B <- myClusterFUN(Benisse.results[,2:21], 100)
Cluster.I <- myClusterFUN(Ibex.IGH, 25)



dimRed.B <- scater::calculateUMAP(t(Benisse.results[,2:21]))
colnames(dimRed.B) <- paste0("Ben_", colnames(dimRed.B))
dimRed.I <- scater::calculateUMAP(t(Ibex.IGH))
colnames(dimRed.I) <- paste0("Ibex_", colnames(dimRed.I))

plot.df <- cbind.data.frame(Cluster.B = Cluster.B, 
                            Cluster.I = Cluster.I, 
                            dimRed.B, 
                            dimRed.I,
                            Epitope = as.vector(Seurat.Meta$Epitope))

plot.df$Epitope[which(is.na(plot.df$Epitope))] <- "No"
plot.df$Epitope <- factor(plot.df$Epitope, levels = c("NP", "ORF8", "RBD", "Spike", "No"))
plot.df$Epitope[which(is.na(plot.df$Epitope))] <- "No"

ggplot(plot.df, aes(x = Ben_UMAP1, y=Ben_UMAP2)) + 
                    geom_point(aes(color = Cluster.B)) + 
                    scale_color_viridis(discrete = TRUE, option = "H", na.value = "grey") + 
                    guides(color = "none") + 
                    theme_void()
ggsave("Benisse.UMAP.png", height =10, width =10, dpi = 400)

ggplot(plot.df %>% arrange(desc(Epitope)), aes(x = Ben_UMAP1, y=Ben_UMAP2)) + 
                    geom_point(aes(color = Epitope)) + 
                    scale_color_manual(values = c(viridis_pal()(4), "grey")) +
                    guides(color = "none") + 
                    theme_void()

ggplot(plot.df, aes(x = Ibex_UMAP1, y=Ibex_UMAP2)) + 
                    geom_point(aes(color = Cluster.I)) + 
                    scale_color_viridis(discrete = TRUE, option = "H") + 
                    guides(color = "none") + 
                    theme_void()
ggsave("Ibex.UMAP.png", height =10, width =10, dpi = 400)

ggplot(plot.df %>% arrange(desc(Epitope)), aes(x = Ibex_UMAP1, y=Ibex_UMAP2)) + 
                    geom_point(aes(color = Epitope)) + 
                    scale_color_manual(values = c(viridis_pal()(4), "grey")) +
                    guides(color = "none") + 
                    theme_void()
```

```{r}

```

```{r}
jacc.mat <- linkClustersMatrix(Cluster.B, Cluster.I)
rownames(jacc.mat) <- paste("Benisse", rownames(jacc.mat))
colnames(jacc.mat) <- paste("Ibex", colnames(jacc.mat))

pdf("Jaccard_Heatmap.pdf", height = 6, width = 6)
pheatmap(jacc.mat, color=viridis::viridis(100), border_color = "white")
dev.off()


```

# Conclusions

```{r}
sessionInfo()
```
