---
title: "Figure 2"
author: "Nick Borcherding"
format: html
editor: visual
date: 'Compiled: `r format(Sys.Date(), "%B %d, %Y")`'
---

## Loading Libraries & Functions

```{r}
library(reshape2)
library(dplyr)
library(viridis)
library(stringr)
library(ggplot2)
library(ggthemes)
library(ggpubr)
library(ggridges)
library(Ibex)
library(patchwork)
library(scater)
```

## Figure 2A: Performance

```{r}
data_dir <- "~/Documents/GitHub/Ibex.manuscript/data/trainingRuns/modelPerformance"

# List all files in the director
performance.results <- list.files(data_dir, full.names = TRUE)
performance.results <- performance.results[-grep("expanded", performance.results)]

# Get the file names without full paths and remove "expanded" entries
performance.names <- list.files(data_dir)
performance.names <- performance.names[-grep("expanded", performance.names)]
performance.names <- str_split(performance.names, "_", simplify = TRUE)

# Read in the RDS files as a list
performance.list <- lapply(performance.results, readRDS)


# Annotate each data frame
for (i in seq_along(performance.list)) {
  performance.list[[i]]$chain <- performance.names[i, 2]   
  performance.list[[i]]$arch <- performance.names[i, 3] 
  performance.list[[i]]$performancer <- performance.names[i, 4] 
}

performance.list <- do.call(rbind, performance.list)
performance.list$mse <- NA
performance.list$mse[performance.list$arch == "CNN" & performance.list$metric == "loss" ] <- performance.list$value[performance.list$arch == "CNN" & performance.list$metric == "loss" ]
performance.list$mse[performance.list$arch == "VAE" & performance.list$metric == "mean_squared_error" ] <- performance.list$value[performance.list$arch == "VAE" & performance.list$metric == "mean_squared_error" ]

performance.list <- performance.list[!is.na(performance.list$mse),]

# Summarize performance data by epoch, chain, arch, data, and performancer
performance_summary <- performance.list %>%
  group_by(epoch, chain, arch, data, performancer) %>%
  summarize(median_mse = median(mse, na.rm = TRUE),
            q25 = quantile(mse, 0.25, na.rm = TRUE),
            q75 = quantile(mse, 0.75, na.rm = TRUE),
            .groups = "drop")

# Plot performance with training vs. validation and encoding approach differentiation
ggplot(performance_summary, aes(x = epoch, y = -log10(median_mse), 
                                color = chain, fill = chain, linetype = data)) +
  geom_line(size = 0.5) +
  geom_ribbon(aes(ymin = -log10(q75), ymax = -log10(q25)), 
              alpha = 0.3, color = NA) +
  facet_grid(performancer ~ arch) +  # Rows: encoding method; Columns: architecture type
  labs(x = "Epoch (log scale)",
       y = "-log10(MSE)",
       linetype = "Data") +
  #scale_x_log10() +
  scale_color_viridis(discrete = TRUE, option = "D") +
  scale_fill_viridis(discrete = TRUE, option = "D") +
  guides(color = guide_legend(title = "Chain"), fill = "none") +
  theme_clean()  + 
  theme(legend.position = "bottom", 
        legend.background = element_rect(color = NA)) 
  
ggsave("./outputs/Figure2/Figure2A.pdf", height = 8.5, width = 5)
```

## Figure 2B: Encoding Time

```{r}
data_dir <- "~/Documents/GitHub/Ibex.manuscript/data/trainingRuns/encodingTime"

# List all files in the director
encode.results <- list.files(data_dir, full.names = TRUE)
encode.results <- encode.results[-grep("expanded", encode.results)]

# Get the file names without full paths and remove "expanded" entries
encode.names <- list.files(data_dir)
encode.names <- encode.names[-grep("expanded", encode.names)]
encode.names <- str_split(encode.names, "_", simplify = TRUE)

# Read in the RDS files as a list
encode.list <- lapply(encode.results, readRDS)
encode.list[c(7:24)] <- lapply(encode.list[c(7:24)], function(x) do.call(rbind, x))


# Annotate each data frame
for (i in seq_along(encode.list)) {
  encode.list[[i]]$chain <- encode.names[i, 2]   
  encode.list[[i]]$arch <- encode.names[i, 3] 
  encode.list[[i]]$encoder <- encode.names[i, 4] 
}

encode.list <- do.call(rbind, encode.list)
median_stats <- encode.list %>%
  group_by(encoder, arch, sample_size) %>%
  summarise(median_time = median(time_taken, na.rm = TRUE),
            .groups = "drop")

# Plot with median reference lines
plot1 <- ggplot(encode.list, aes(x = sample_size, y = time_taken)) + 
  geom_jitter(alpha = 0.5, aes(color = encoder)) +  # Scatter plot with transparency
  geom_smooth(method = "loess", se = FALSE, color = "black", 
              size = 0.5, linetype = "dashed") +  # Loess smoothing line
  scale_x_log10() + 
  
  # Median intersection points
  geom_point(data = median_stats, aes(x = sample_size, y = median_time), 
             size = 3, fill = "black") +
  theme_clean() +   
  facet_grid(. ~ arch) + 
  guides(color = "none") + 
  labs(
       x = "Sample Size",
       y = "Time Taken (s)") + 
  scale_color_viridis(discrete = TRUE, direction = -1) +  
  scale_fill_viridis(discrete = TRUE, direction = -1) +
  theme(legend.position = "right",        
        plot.background = element_rect(color = NA)) 


median_stats <- encode.list %>%
  group_by(encoder, arch, chain) %>%
  summarise(median_time_per_seq = median(time_taken / sample_size, na.rm = TRUE), .groups = "drop")


plot2 <- ggplot(median_stats, aes(x = encoder, 
                         y = median_time_per_seq, 
                         fill = encoder)) + 
  geom_col(position = "dodge") +  #
  facet_grid(arch ~ chain) +  
  scale_fill_viridis(discrete = TRUE, direction = -1) +  
  theme_minimal() +
  theme(legend.position = "right",
        axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels for readability
        plot.background = element_rect(color = NA)) + 
  scale_x_discrete(limits=rev) + 
  coord_flip() + 
  labs(y = "Time per Sequence (s)") + 
  guides(fill = FALSE) + 
  theme(axis.title.y = element_blank())

plot1 + plot2 + plot_layout(widths = c(2.5, 1), guides = 'collect')
ggsave("./outputs/Figure2/Figure2B.pdf", height = 5, width = 10.5)
```

## Figure 2C: Edit Distance Distributions

```{r}
data_dir <- "~/Documents/GitHub/Ibex.manuscript/data/trainingRuns/editDistances"

# List all files in the director
edit.results <- list.files(data_dir, full.names = TRUE)
edit.results <- edit.results[-grep("expanded", edit.results)]

# Get the file names without full paths and remove "expanded" entries
edit.names <- list.files(data_dir)
edit.names <- edit.names[-grep("expanded", edit.names)]
edit.names <- str_split(edit.names, "_", simplify = TRUE)

# Read in the RDS files as a list
edit.list <- lapply(edit.results, readRDS)

# Annotate each data frame
for (i in seq_along(edit.list)) {
  edit.list[[i]]$chain <- edit.names[i, 2]   
  edit.list[[i]]$arch <- edit.names[i, 3] 
  edit.list[[i]]$encoder <- edit.names[i, 4] 
}

edit.list <- do.call(rbind, edit.list)

# Filter out extreme values
edit.list_filtered <- edit.list %>% filter(normalized_edit_distances < 1)

# Plot 1: Ridgeline Density Plot
plot1 <- ggplot(edit.list_filtered, aes(x = normalized_edit_distances, y = encoder, fill = ..x..)) +
  geom_density_ridges_gradient(scale = 3, 
                               rel_min_height = 0.01, 
                               alpha = 0.7, 
                               stat = "binline") +
  facet_wrap(~ arch) +
  labs(
       x = "Normalized Edit Distance",
       y = "Encoder") +
  guides(fill = "none") + 
  theme_clean() +
  scale_fill_viridis(option = "D") + 
  theme(axis.title.y = element_blank(), 
        plot.background = element_rect(color = NA))

# Plot 2: Bar Chart with Error Bars for Median Edit Distances
median_edit_distances <- edit.list_filtered %>%
  group_by(encoder, arch, chain) %>%
  summarise(median_norm_edit = median(normalized_edit_distances, na.rm = TRUE),
            sd_norm_edit = sd(normalized_edit_distances, na.rm = TRUE),
            .groups = "drop")

plot2 <- ggplot(median_edit_distances, aes(x = encoder, y = median_norm_edit, fill = encoder)) +
  geom_col(position = "dodge") +
  geom_point() + 
  geom_errorbar(aes(ymin = median_norm_edit, ymax = median_norm_edit + sd_norm_edit),
                width = 0.2, position = position_dodge(width = 0.9)) +
  facet_grid(arch ~ chain) +
  labs(
       x = "Encoder",
       y = "Median Normalized Edit Distance") +
  coord_flip() +
  theme_clean() +
  scale_x_discrete(limits=rev) + 
  scale_fill_viridis(discrete = TRUE, direction = -1) +
  theme(legend.position = "none", 
        axis.title.y = element_blank(), 
        plot.background = element_rect(color = NA))

# Combine the two plots
plot1 + plot2 + plot_layout(widths = c(2.5, 1), guides = 'collect')
ggsave("./outputs/Figure2/Figure2C.pdf", height = 5, width = 10.5)

```
## Figure 2D: Visualise Latent Dimensions

```{r}

# Read and preprocess the Seurat object
SeuratObj <- readRDS(url("https://www.borch.dev/uploads/data/Ibex_FullExample.rds"))
cell.idx <- which(!is.na(SeuratObj$CTaa))
SeuratObj <- subset(SeuratObj, cells = rownames(SeuratObj[[]])[cell.idx])
SeuratObj$HeavyV <- str_split(SeuratObj$CTgene, "[.]", simplify = TRUE)[,1]
SeuratObj$Isotype <- str_split(SeuratObj$CTgene, "[.]", simplify = TRUE)[,4]
SeuratObj$LightV <- str_split(SeuratObj$Isotype, "_", simplify = TRUE)[,2]
SeuratObj$Isotype <- str_split(SeuratObj$Isotype, "_", simplify = TRUE)[,1]

# Define the parameters
models <- c("OHE", "atchleyFactors", "crucianiProperties", "kideraFactors", "MSWHIM", "tScales")
chains <- c("Heavy", "Light")
archs  <- c("VAE", "CNN")

# Create an empty list to store the MDS data frames
mds_list <- list()

# Loop over each architecture, chain, and model
for (arch_val in archs) {
  for (chain_val in chains) {
    for (model_val in models) {
      # Construct a unique reduction name
      reduction_name <- paste0("Ibex.", chain_val, ".", arch_val, ".", model_val)
      
      # Run the model to get the latent dimensions (runIbex is assumed to update the Seurat object)
      SeuratObj <- runIbex(SeuratObj, 
                           chain = chain_val,
                           method = "encoder",
                           encoder.model = arch_val,
                           encoder.input = model_val, 
                           reduction.name = reduction_name)
      
      # Extract the cell embeddings and calculate MDS
      emb <- SeuratObj[[reduction_name]]@cell.embeddings
      MDS_df <- as.data.frame(calculateMDS(t(emb)))
      
      # Add annotation columns
      MDS_df$chain <- chain_val
      MDS_df$arch <- arch_val
      MDS_df$model <- model_val
      if(chain_val == "Heavy") {
         MDS_df$Vgene <- SeuratObj$HeavyV
      } else {
         MDS_df$Vgene <- SeuratObj$LightV
      }
      MDS_df$PT <- SeuratObj$orig.ident
      
      # Store the result with a unique key
      key <- paste(arch_val, chain_val, model_val, sep = "_")
      mds_list[[key]] <- MDS_df
    }
  }
}

# Combine all MDS data into one data frame
mds_all <- bind_rows(mds_list)

# Split data by chain
mds_heavy <- mds_all %>% filter(chain == "Heavy")
mds_light <- mds_all %>% filter(chain == "Light")

# Split data by chain
mds_heavy <- mds_all %>% filter(chain == "Heavy")
mds_light <- mds_all %>% filter(chain == "Light")

# Create Heavy chain plot with viridis color scale
p_heavy <- ggplot(mds_heavy, aes(x = V1, y = V2)) +
  geom_point(aes(color = Vgene, shape = model), size = 1.5, alpha = 0.8) +
  facet_wrap(~arch) +
  scale_color_viridis_d(option = "D") +
  theme_void() +
  guides(color = "none") +
  theme(plot.background = element_rect(color = NA), 
        axis.title = element_blank(), 
        axis.ticks = element_blank(),
        axis.text = element_blank())


# Create Light chain plot with inferno color scale
p_light <- ggplot(mds_light, aes(x = V1, y = V2)) +
  geom_point(aes(color = Vgene, shape = model), size = 1.5, alpha = 0.8) +
  facet_wrap(~arch) +
  scale_color_viridis_d(option = "inferno") +
  theme_void() +
  guides(color = "none") + 
  theme(plot.background = element_rect(color = NA), 
        axis.title = element_blank(), 
        axis.ticks = element_blank(),
        axis.text = element_blank())

# Combine the plots vertically using patchwork
combined_plot <- p_heavy + p_light + plot_layout(guides = "collect")


# Save the combined plot
ggsave("./outputs/Figure2/Figure2D.pdf", combined_plot, height = 5, width = 20)


#Heavy Vgene Legend
colorbar_df <- data.frame(x = seq(0, 1, length.out = 100), y = 1)
p <- ggplot(colorbar_df, aes(x = x, y = y, fill = x)) +
  geom_tile() +
  scale_fill_viridis_c(option = "D") +
  theme_void() +
  guides(fill = "none") + 
  theme(legend.position = "bottom")

# Save the plot
ggsave("./outputs/Figure2D_heavyLegend.pdf", p, width = 6, height = 1)

#Light Vgene Legend
colorbar_df <- data.frame(x = seq(0, 1, length.out = 100), y = 1)
p <- ggplot(colorbar_df, aes(x = x, y = y, fill = x)) +
  geom_tile() +
  scale_fill_viridis_c(option = "inferno") +
  theme_void() +
  guides(fill = "none") + 
  theme(legend.position = "bottom")

# Save the plot
ggsave("./outputs/Figure2D_lightLegend.pdf", p, width = 6, height = 1)

```

