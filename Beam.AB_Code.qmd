---
title: "BEAM-Ab Analysis"
format: html
editor: visual
---

## Loading Libraries

```{r}
library(Seurat)
library(scRepertoire)
library(patchwork)
library(ggplot2)
library(viridis)
library(dplyr)
library(SingleR)
library(Azimuth)
library(scDblFinder)
library(harmony)
library(RColorBrewer)

HPCA <- HumanPrimaryCellAtlasData()
```

## Loading and Filtering Single-Cell Data

```{r}
SC.Files <- list.files("./data/BEAM.AB/Dugan2021/Recovered/")
lapply(SC.Files, function(x) {
      tmp <- Read10X(data.dir = paste0("./data/BEAM.AB/Dugan2021/Recovered/", x))
      
      
      SeuratObj <-  CreateSeuratObject(counts = tmp[[1]], 
                               project = x, 
                               min.cells = 3, 
                               min.features = 200)
      
      SeuratObj$nCount_RNA <- colSums(SeuratObj@assays$RNA$counts)
      SeuratObj$nFeature_RNA <- colSums(SeuratObj@assays$RNA$counts != 0)
      
      #Attaching the BEAM-Ab data to single-cell object
      BEAM <- tmp[[2]][,colnames(tmp[[2]]) %in% rownames(SeuratObj@meta.data)]
      BEAM <- CreateAssayObject(counts = BEAM)
      SeuratObj[["BEAM"]] <- BEAM
      SeuratObj$nCount_BEAM <- colSums(SeuratObj@assays$BEAM$counts)
      SeuratObj$nFeature_BEAM <- colSums(SeuratObj@assays$BEAM$counts != 0)
      
      #Adding Sample Acession to barcodes
      new.names <- paste0(x, "_", colnames(SeuratObj))
      SeuratObj <- RenameCells(SeuratObj, new.names = new.names)
      
      #Calculating percentage of Genes
      SeuratObj[["percent.ribo"]] <- PercentageFeatureSet(SeuratObj, pattern = "^RPS|RPL-")
      SeuratObj[["percent.mt"]] <- PercentageFeatureSet(SeuratObj, pattern = "^MT-")
      
      #Filtering the Data Set for QC Metrics
      standev <- sd(log(SeuratObj$nFeature_RNA))*2.5 #cutting off above standard deviation of 2.5
      mean <- mean(log(SeuratObj$nFeature_RNA))
      cut <- round(exp(standev+mean))
      SeuratObj <- subset(SeuratObj, subset = percent.mt < 10 & nFeature_RNA < cut)
    
      ###########################################
      #Estimate Doublets for Each Sequencing Run
      ############################################
      sce <- as.SingleCellExperiment(SeuratObj)
      sce <- scDblFinder(sce)
      doublets <- data.frame(db.class = sce$scDblFinder.class, db.score = sce$scDblFinder.score)
      rownames(doublets) <- rownames(sce@colData)
      SeuratObj <- AddMetaData(SeuratObj, doublets)
  
      #######################
      #Adding BCR information
      #######################
      
      contigs <- read.csv(paste0("./data/BEAM.AB/Dugan2021/Recovered/", x, "/filtered_contig_annotations.csv.gz"))
      combined.BCR <- combineBCR(contigs,
                               samples = x)
      SeuratObj <- combineExpression(combined.BCR, SeuratObj)
    
      ###########################################
      #Seurat Azimuth Annotation
      ############################################
      AziObject <- NormalizeData(SeuratObj , verbose = FALSE)
      AziObject <- ScaleData(AziObject , verbose = FALSE)
      AziObject <- FindVariableFeatures(AziObject , nfeatures = 2500)
      VariableFeatures(AziObject ) <- VariableFeatures(AziObject )[-grep("^IG[HLK][VDJCGAMD]", VariableFeatures(AziObject ))]
      AziObject <- RunPCA(AziObject , verbose = FALSE)
      AziObject <- RunUMAP(AziObject , dims = 1:30, verbose = FALSE)
      AziObject <- FindNeighbors(object = AziObject , 
                           features = VariableFeatures(AziObject ), 
                           verbose = FALSE)
     
      AziObject <- RunAzimuth(AziObject, 
                              reference = "pbmcref",
                              verbose = FALSE)
     
      SeuratObj <- AddMetaData(SeuratObj, AziObject[[]])
        
      #############################################
      #Singler Annotation of Cell Types
      #############################################
        
      com.res1 <- SingleR(sce, ref=HPCA, labels=HPCA$label.fine, assay.type.test=1)
    
      df <- data.frame("labels" = com.res1$labels, "pruned.labels" = com.res1$pruned.labels)
      rownames(df) <- rownames(com.res1)
      colnames(df) <- paste0("HPCA.", colnames(df))
      SeuratObj <- AddMetaData(SeuratObj,  df)
      
      
      ####################################
      #Final Filter: Only B cells with BCR
      ####################################
      Bcells <- rownames(SeuratObj[[]])[which(SeuratObj[[]]$predicted.celltype.l1 == "B" & !is.na(SeuratObj$CTaa))]
      SeuratObj <- subset(SeuratObj, cells = Bcells)
      
      SeuratObj
}) -> SeuratList

SeuratMerge <- merge(SeuratList[[1]], SeuratList[-1])
rm(SeuratList)
gc()
saveRDS(SeuratMerge, "./data/processed/Dugan2021_BEAM.ab_Recovered_Seurat.rds")
```

## Merging and Dimensional Reduction

```{r}

SeuratMerge <- JoinLayers(SeuratMerge)
DefaultAssay(SeuratMerge) <- "RNA"

all.genes <- rownames(SeuratMerge@assays$RNA$counts)
SeuratMerge  <- NormalizeData(SeuratMerge)
SeuratMerge  <- FindVariableFeatures(SeuratMerge, nfeatures = 2500)
VariableFeatures(SeuratMerge) <- VariableFeatures(SeuratMerge)[-grep("^IG[HLK][VDJCAGM]", VariableFeatures(SeuratMerge))]

SeuratMerge  <- SeuratMerge %>%
                  ScaleData(vars.to.regress = "percent.mt", 
                            features = all.genes, 
                            verbose = FALSE) %>%
                  RunPCA(features = VariableFeatures(SeuratMerge), 
                         verbose = FALSE)
SeuratMerge <- RunHarmony(SeuratMerge, "orig.ident")

SeuratMerge <- SeuratMerge %>%
                  FindNeighbors(reduction = "harmony") %>%
                  FindClusters(algorithm = 4) 
        
SeuratMerge <- RunUMAP(SeuratMerge, 
                       reduction = "harmony", 
                       dims = 1:10)



saveRDS(SeuratMerge, "./data/processed/Dugan2021_BEAM.ab_Recovered_Seurat.rds")
```

```{r}
Cluster.Pal <- colorRampPalette(brewer.pal(11, "Paired"))(length(unique(SeuratMerge$seurat_clusters)))


DimPlot(SeuratMerge) +
  scale_color_manual(values = Cluster.Pal) + 
  theme_void()
DimPlot(SeuratMerge, group.by = "orig.ident") + 
  scale_color_viridis(discrete = TRUE) + 
  theme_void()
DimPlot(SeuratMerge, group.by = "cloneSize") + 
  scale_color_viridis(discrete = TRUE, direction = -1) + 
  theme_void()
DimPlot(SeuratMerge, group.by = "predicted.celltype.l2") + 
  scale_color_viridis(discrete = TRUE, option = "H") + 
  theme_void()
```

## Processing Single-Cell Object

```{r}
all.markers <- FindAllMarkers(SeuratMerge, only.pos = TRUE)
all.markers %>%
    group_by(cluster) %>%
    dplyr::filter(avg_log2FC > 1) %>%
    slice_max(order_by = avg_log2FC, n = 5)
```

Normalizing BEAM

modified CLR, which I believe first scaled them across antigens and then normalised against a negative control

From the methods: whereas cell surface protein and antigen probe were normalized by a centered log-ratio (CLR) normalization

mapping only the cells that bound a single probe revealed that
antigen-specific cells were enriched in distinct transcriptional
clusters

Others have normalised against hashtag antibodies

```{r}
DefaultAssay(SeuratMerge) <- "BEAM"

SeuratMerge  <- NormalizeData(SeuratMerge, nomalization.method = "CLR")


FeaturePlot(SeuratMerge, features = "Hashtag1-R1")

plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nCount_BEAM")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2

#DefaultAssay(pbmc) <- "BEAM"

#pbmc <- pbmc %>%
#           ScaleData()

FeatureScatter(pbmc, "Anti-Hen-Egg-Lysozyme", "gp120")
FeatureScatter(pbmc, "Anti-Hen-Egg-Lysozyme", "negative-control")
FeatureScatter(pbmc, "gp120", "negative-control")
```

Method for Calling Ag+ Cells

Running Mouse Derived Ibex Models

Reduction comparing RNA, Ibex, RNA + Ibex as a function of Ag specificity
